# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QLiaiIsUdyJu17wH6obf4HpwEZL-tapW
"""

import streamlit as st
import pandas as pd
import numpy as np
import pickle
import datetime

# 1) Load models with the new decorator
@st.cache_resource
def load_models():
    with open("scaler.pkl", "rb") as f: scaler = pickle.load(f)
    with open("pca.pkl",    "rb") as f: pca    = pickle.load(f)
    with open("kmeans.pkl", "rb") as f: kmeans = pickle.load(f)
    return scaler, pca, kmeans

scaler, pca, kmeans = load_models()

# 2) Helper mappings (must match your LabelEncoder logic)
def map_education(ed):
    return {"Basic":0, "2n Cycle":0, "Graduation":1, "Master":2, "PhD":2}[ed]

def map_living(ms):
    # In training you collapsed Marital_Status -> Living_status
    return 1 if ms in ["Married","Together"] else 0

# 3) Sidebar inputs
st.sidebar.title("Customer Profile")

income    = st.sidebar.number_input("Income", 0.0, 1e6, 50_000.0, step=100.0)
recency   = st.sidebar.number_input("Recency (days)", 0, 365, 30)
wines     = st.sidebar.number_input("Spend on Wines",   0, 10_000, 200)
fruits    = st.sidebar.number_input("Spend on Fruits",  0, 10_000,  50)
meat      = st.sidebar.number_input("Spend on Meat",    0, 10_000, 100)
fish      = st.sidebar.number_input("Spend on Fish",    0, 10_000,  80)
sweets    = st.sidebar.number_input("Spend on Sweets",  0, 10_000,  40)
gold      = st.sidebar.number_input("Spend on Gold",    0, 10_000,  60)

num_deals        = st.sidebar.number_input("NumDealsPurchases",     0, 100, 2)
num_web          = st.sidebar.number_input("NumWebPurchases",       0, 100, 5)
num_catalog      = st.sidebar.number_input("NumCatalogPurchases",   0, 100, 3)
num_store        = st.sidebar.number_input("NumStorePurchases",     0, 100, 4)
num_web_visits   = st.sidebar.number_input("NumWebVisitsMonth",     0, 50,   7)

kidhome   = st.sidebar.number_input("Kids at Home",  0, 5, 0)
teenhome  = st.sidebar.number_input("Teens at Home", 0, 5, 0)

marital   = st.sidebar.selectbox("Marital Status",
                ["Married","Together","Single","Divorced","Widow","Alone","Absurd","YOLO"])
education = st.sidebar.selectbox("Education",
                ["Basic","2n Cycle","Graduation","Master","PhD"])

birth_year = st.sidebar.number_input("Year of Birth", 1900, datetime.date.today().year, 1985)
reg_date   = st.sidebar.date_input("Enrollment Date", datetime.date(2013,1,1))

# 4) Feature engineering (mirror your notebook exactly)
children       = kidhome + teenhome
living_status  = map_living(marital)
family_size    = (2 if living_status==1 else 1) + children
is_parent      = 1 if children>0 else 0
age            = datetime.date.today().year - birth_year
customer_for   = (datetime.date.today() - reg_date).days
spent_total    = wines + fruits + meat + fish + sweets + gold

# 5) Build the single-row DataFrame
row = pd.DataFrame([{
    "Education":           map_education(education),
    "Income":              income,
    "Recency":             recency,
    "Wines":               wines,
    "Fruits":              fruits,
    "Meat":                meat,
    "Fish":                fish,
    "Sweets":              sweets,
    "Gold":                gold,
    "NumDealsPurchases":   num_deals,
    "NumWebPurchases":     num_web,
    "NumCatalogPurchases": num_catalog,
    "NumStorePurchases":   num_store,
    "NumWebVisitsMonth":   num_web_visits,
    "Customer_For":        customer_for,
    "Age":                 age,
    "Spent":               spent_total,
    "Living_status":       living_status,
    "Children":            children,
    "Family_Size":         family_size,
    "Is_Parent":           is_parent
}])

# 5) Only predict when button is clicked
if st.button("Predict Customer Segment"):
    # scale → PCA → predict
    scaled = scaler.transform(row)
    pc = pca.transform(scaled)
    cluster = kmeans.predict(pc)[0]

    # display result
    st.header("Predicted Customer Segment")
    st.success(f"Cluster {cluster}")
else:
    st.write("Click the **Predict Customer Segment** button to see your result.")